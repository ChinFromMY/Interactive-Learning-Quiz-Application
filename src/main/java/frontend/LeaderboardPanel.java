/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend;
import backend.ResultException;
import backend.UserData;
import backend.ResultLog;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

// Creator: CHIN PEI YI (98485)
// Tester: TIONG WOEI CHIN (101224)

// Leaderboard Panel
// display rankings for all quizzes
// highlight ranking of current user
public class LeaderboardPanel extends javax.swing.JPanel {
    
    private JPanel mainPanel;
    
    // Constructor
    public LeaderboardPanel() {
        initComponents();
        jScrollPane1.getViewport().setBackground(new Color(51,0,51));
        showLeaderboard("1"); // default display
    }
    
    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }
    
    // Display leaderboard for each topic
    private void showLeaderboard(String topicFilter) {
        List<String[]> rankingData = new ArrayList<>();
        
        // Load results for each topic into array list
        try {
            rankingData = ResultLog.loadResults(topicFilter);
        } catch (ResultException e) {
                    JOptionPane.showMessageDialog(this, 
                        "An error occurred for loading result:\n" + e.getMessage(),
                        "Result Loading Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
        
        String currentUser = UserData.getUsername();
        System.out.println("Leaderboard current user: " + currentUser);
        
        // Custom table
        DefaultTableModel model = new DefaultTableModel(){
            @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells non-editable
                }
        };
        model.setColumnIdentifiers(new String[]{
            "Rank", "Username", "Score","Time"
        });
        
        // Highlight ranking row for current user
        int rank = 1;
        int highlightRow = -1;
        
        for (String[] record : rankingData) {
            model.addRow(new Object[] {
                rank,
                record[0],
                record[2],
                record[3] + "s"
            } );
            
            if (record[0].equals(currentUser)) {
            highlightRow = rank - 1;
            }
            rank++;
        }
        
        leaderboardTable.setModel(model);
        
        // Highlight row
        if (highlightRow != -1) {
            leaderboardTable.setRowSelectionInterval(highlightRow, highlightRow);
            leaderboardTable.setSelectionBackground(new Color(255,255,204));
            leaderboardTable.setSelectionForeground(new Color(51,0,51));
        }
        
        // Center align all columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < leaderboardTable.getColumnCount(); i++) {
            leaderboardTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    
    public void refresh(String topicFilter) {
        showLeaderboard(topicFilter);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        leaderboardTable = new javax.swing.JTable();
        backMenuButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(51, 0, 51));
        setForeground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(430, 670));
        setPreferredSize(new java.awt.Dimension(430, 670));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBackground(new java.awt.Color(51, 0, 51));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 300));

        leaderboardTable.setBackground(new java.awt.Color(51, 0, 51));
        leaderboardTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leaderboardTable.setForeground(new java.awt.Color(255, 255, 255));
        leaderboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        leaderboardTable.setMaximumSize(new java.awt.Dimension(2147483647, 80300));
        leaderboardTable.setMinimumSize(new java.awt.Dimension(400, 300));
        leaderboardTable.setRowHeight(25);
        leaderboardTable.setRowMargin(1);
        leaderboardTable.setShowGrid(false);
        leaderboardTable.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(leaderboardTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        backMenuButton.setBackground(new java.awt.Color(51, 0, 51));
        backMenuButton.setFont(new java.awt.Font("STHupo", 1, 24)); // NOI18N
        backMenuButton.setForeground(new java.awt.Color(255, 255, 204));
        backMenuButton.setText("<");
        backMenuButton.setBorder(null);
        backMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMenuButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 15, 0, 0);
        add(backMenuButton, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Hall of Fame");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel1, gridBagConstraints);

        topicComboBox.setBackground(new java.awt.Color(51, 0, 51));
        topicComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        topicComboBox.setForeground(new java.awt.Color(255, 255, 255));
        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Topic 1", "Topic 2", "Topic 3", "Topic 4" }));
        topicComboBox.setMinimumSize(new java.awt.Dimension(100, 25));
        topicComboBox.setPreferredSize(new java.awt.Dimension(100, 25));
        topicComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 18, 20, 0);
        add(topicComboBox, gridBagConstraints);

        getAccessibleContext().setAccessibleParent(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void backMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMenuButtonActionPerformed
        // Switch to MenuPanel
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "menu");
    }//GEN-LAST:event_backMenuButtonActionPerformed

    private void topicComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicComboBoxActionPerformed

        String selected = topicComboBox.getSelectedItem().toString();
        String topic = "";
        
        switch (selected) {
            case "Topic 1" -> topic = "1";
            case "Topic 2" -> topic = "2";
            case "Topic 3" -> topic = "3";
            case "Topic 4" -> topic = "4";
        }
        showLeaderboard(topic);
    }//GEN-LAST:event_topicComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backMenuButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable leaderboardTable;
    private javax.swing.JComboBox<String> topicComboBox;
    // End of variables declaration//GEN-END:variables
}
