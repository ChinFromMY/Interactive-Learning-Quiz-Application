/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend;

import backend.ResultException;
import backend.ResultLog;
import backend.UserData;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

// Creator: CHIN PEI YI (98485)
// Tester: TIONG WOEI CHIN (101224)

// Quiz History Panel
// Display user personal quiz attempts
public class QuizHistoryPanel extends javax.swing.JPanel {

    private JPanel mainPanel;
    
    public QuizHistoryPanel() {
        initComponents();
        showAllHistory();
    }
    
    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }
    
    // Display quiz attempts for all topics
    private void showAllHistory() {
        String username = UserData.getUsername();
        DefaultTableModel defaultTable = new DefaultTableModel();
        
        try {   
            defaultTable = ResultLog.loadResults(username, "All");
        } catch (ResultException e) {
                    JOptionPane.showMessageDialog(this, 
                        "An error occurred for loading result:\n" + e.getMessage(),
                        "Result Loading Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
        
        historyTable.setDefaultEditor(Object.class, null);
        historyTable.setModel(defaultTable);
        quizHistScrollPane.getViewport().setBackground(new Color(51,0,51));
        historyTable.getColumnModel().getColumn(0).setPreferredWidth(180);
        historyTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        historyTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        
        // Center align all columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < historyTable.getColumnCount(); i++) {
            historyTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    
    // Display quiz attempts for certain topic only
    private void showFilterHistory() {
        String selected = topicComboBox.getSelectedItem().toString();
        String topic = "";
        
        switch (selected) {
            case "Topic 1" -> topic = "1";
            case "Topic 2" -> topic = "2";
            case "Topic 3" -> topic = "3";
            case "Topic 4" -> topic = "4";
            case "All" -> topic = "All";
        }

        DefaultTableModel filterTable = new DefaultTableModel();
        
        try {
            filterTable = ResultLog.loadResults(UserData.getUsername(), topic);
        } catch (ResultException e) {
                    JOptionPane.showMessageDialog(this, 
                        "An error occurred for loading result:\n" + e.getMessage(),
                        "Result Loading Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
        
        historyTable.setDefaultEditor(Object.class, null);
        historyTable.setModel(filterTable);
        historyTable.getColumnModel().getColumn(0).setPreferredWidth(180);
        historyTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        historyTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        
        // Center align all columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < historyTable.getColumnCount(); i++) {
            historyTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        backMenuButton = new javax.swing.JButton();
        quizHistLabel = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox<>();
        quizHistScrollPane = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(51, 0, 51));
        setForeground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(430, 670));
        setPreferredSize(new java.awt.Dimension(430, 670));
        setLayout(new java.awt.GridBagLayout());

        backMenuButton.setBackground(new java.awt.Color(51, 0, 51));
        backMenuButton.setFont(new java.awt.Font("STHupo", 1, 24)); // NOI18N
        backMenuButton.setForeground(new java.awt.Color(255, 255, 204));
        backMenuButton.setText("<");
        backMenuButton.setBorder(null);
        backMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMenuButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 0);
        add(backMenuButton, gridBagConstraints);

        quizHistLabel.setFont(new java.awt.Font("DialogInput", 1, 26)); // NOI18N
        quizHistLabel.setForeground(new java.awt.Color(255, 255, 204));
        quizHistLabel.setText("My History Attempts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(quizHistLabel, gridBagConstraints);

        topicComboBox.setBackground(new java.awt.Color(51, 0, 51));
        topicComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        topicComboBox.setForeground(new java.awt.Color(255, 255, 255));
        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Topic 1", "Topic 2", "Topic 3", "Topic 4" }));
        topicComboBox.setMinimumSize(new java.awt.Dimension(100, 25));
        topicComboBox.setPreferredSize(new java.awt.Dimension(100, 25));
        topicComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 18, 10, 0);
        add(topicComboBox, gridBagConstraints);

        quizHistScrollPane.setBackground(new java.awt.Color(51, 0, 51));
        quizHistScrollPane.setBorder(null);
        quizHistScrollPane.setForeground(new java.awt.Color(255, 255, 255));
        quizHistScrollPane.setMinimumSize(new java.awt.Dimension(400, 300));
        quizHistScrollPane.setViewportView(null);

        historyTable.setBackground(new java.awt.Color(51, 0, 51));
        historyTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        historyTable.setForeground(new java.awt.Color(255, 255, 255));
        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        historyTable.setMinimumSize(new java.awt.Dimension(400, 300));
        historyTable.setRowHeight(25);
        historyTable.setRowMargin(1);
        historyTable.setShowGrid(false);
        historyTable.setShowHorizontalLines(true);
        quizHistScrollPane.setViewportView(historyTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(quizHistScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void backMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMenuButtonActionPerformed
        // Switch to MenuPanel
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "quiz");
    }//GEN-LAST:event_backMenuButtonActionPerformed

    private void topicComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicComboBoxActionPerformed
        showFilterHistory();
    }//GEN-LAST:event_topicComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backMenuButton;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel quizHistLabel;
    private javax.swing.JScrollPane quizHistScrollPane;
    private javax.swing.JComboBox<String> topicComboBox;
    // End of variables declaration//GEN-END:variables
}
