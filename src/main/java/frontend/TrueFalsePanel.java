/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend;

import backend.Question;
import backend.Quiz2;
import backend.QuizException;
import backend.ResultException;
import backend.ResultLog;
import backend.TimerException;
import backend.TimerManager;
import java.awt.CardLayout;
import javax.swing.*;

// Creator: HII SIEW CHIENG (97444)
// Tester: CHAN CHIN XUAN (98439)

// Fill in blanks Quiz for Topic 2 - DeepFake Detection
public class TrueFalsePanel extends javax.swing.JPanel implements IQuizPanel {
    
    private String username;
    private ResultPanel resultPanel;
    private TrueFalsePanel tfPanel;
    private Quiz2 quiz2;
    private TimerManager timer2;
    private int currentIdx = 0;
    private String selected = "";
    private JPanel mainPanel;
    private long timeTaken;
    
    // Constructor
    public TrueFalsePanel() {
        initComponents();
        
        try {
            quiz2 = new Quiz2();
        } catch (QuizException e) {
            JOptionPane.showMessageDialog(null, "Error loading quiz: " + e.getMessage(), "Quiz Load Error", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            timer2 = new TimerManager(this::updateTimerLabel);  // may throw TimerException
        } catch (TimerException e) {
            JOptionPane.showMessageDialog(null, "Error initializing timer: " + e.getMessage(), "Timer Init Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Group radioButton to allow single selection
        buttonGroup2.add(trueOptn);
        buttonGroup2.add(falseOptn);
        
    }
    
    public void initializeQuiz() {
        if (quiz2 != null) {
            displayQuestion();
        }
    }
    
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    public void setTimeTaken(long seconds) {
        this.timeTaken = seconds;
    }
    
    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }
    
    public void setResultPanel(ResultPanel resultPanel) {
        this.resultPanel = resultPanel;
    }
    
    //== Overriden methods from IQuizPanel ===
    @Override
    public void displayQuestion() {
        // If quiz completed
        if (currentIdx >= quiz2.getQuestion().size()) {
                return;
        }
      
        // Assign each question to Question class instance
        Question q = quiz2.getQuestion().get(currentIdx);
        
        // Get topic
        topicLabel.setText("Quiz " + quiz2.getTopic());
        
        // Get score
        scoreLabel.setText("Score " + quiz2.getScore());
        // Get question
        questionTextArea.setText(q.getQuestionText());
        questionNoLabel.setText("Question " + (currentIdx+1) + " / " + quiz2.getQuestion().size());
        // Get choices
        java.util.List<String> choices = q.getChoices();
        trueOptn.setText(choices.get(0));
        falseOptn.setText(choices.get(1));
        
    }   
    
    @Override
    public void updateTimerLabel(long seconds) {
        timerLabel.setText("Time " + seconds + "s");
    }
    
    @Override
    public void startTimer() {
        try {
            if (timer2 != null) {
                timer2.startTimer();  // can throw TimerException if already running
            }
        } catch (TimerException ex) {
            JOptionPane.showMessageDialog(null, "Error starting timer: " + ex.getMessage(), "Timer Start Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    @Override
    public void stopTimer() {
        timer2.stopTimer();
    }
    
    @Override
    public void resetQuiz() {
        currentIdx = 0;
        selected = "";
        quiz2.setScore(0);
        updateTimerLabel(0);
        
        try {
            // Restart if needed
            startTimer();
            this.quiz2 = new Quiz2();
            // Clear previous selection
            buttonGroup2.clearSelection();
            // Re-display first question
            displayQuestion();

            revalidate();
            repaint();
            //startTimer();
        } catch (QuizException e) {
            JOptionPane.showMessageDialog(this, "Failed to reset quiz: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup2 = new javax.swing.ButtonGroup();
        instructionLabel = new javax.swing.JLabel();
        trueOptn = new javax.swing.JRadioButton();
        falseOptn = new javax.swing.JRadioButton();
        topPanel = new javax.swing.JPanel();
        backQuizButton1 = new javax.swing.JButton();
        topicLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        timerIcon = new javax.swing.JLabel();
        scoreIcon = new javax.swing.JLabel();
        questionNoLabel = new javax.swing.JLabel();
        questionTextArea = new javax.swing.JTextArea();
        nextQuestionBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 0, 51));
        setForeground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(430, 670));
        setPreferredSize(new java.awt.Dimension(430, 670));
        setLayout(new java.awt.GridBagLayout());

        instructionLabel.setBackground(new java.awt.Color(51, 0, 51));
        instructionLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        instructionLabel.setForeground(new java.awt.Color(255, 255, 204));
        instructionLabel.setText("Please choose TRUE or FALSE for each question.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 30, 0);
        add(instructionLabel, gridBagConstraints);

        trueOptn.setBackground(new java.awt.Color(51, 0, 51));
        trueOptn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        trueOptn.setForeground(new java.awt.Color(255, 255, 255));
        trueOptn.setText("   True");
        trueOptn.setMargin(new java.awt.Insets(10, 0, 10, 0));
        trueOptn.setMinimumSize(new java.awt.Dimension(100, 30));
        trueOptn.setPreferredSize(new java.awt.Dimension(100, 30));
        trueOptn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trueOptnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        add(trueOptn, gridBagConstraints);

        falseOptn.setBackground(new java.awt.Color(51, 0, 51));
        falseOptn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        falseOptn.setForeground(new java.awt.Color(255, 255, 255));
        falseOptn.setText("   False");
        falseOptn.setMargin(new java.awt.Insets(10, 0, 10, 0));
        falseOptn.setMinimumSize(new java.awt.Dimension(300, 60));
        falseOptn.setPreferredSize(new java.awt.Dimension(100, 30));
        falseOptn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                falseOptnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        add(falseOptn, gridBagConstraints);

        topPanel.setBackground(new java.awt.Color(51, 0, 51));
        topPanel.setLayout(new java.awt.GridBagLayout());

        backQuizButton1.setBackground(new java.awt.Color(51, 0, 51));
        backQuizButton1.setFont(new java.awt.Font("STHupo", 1, 24)); // NOI18N
        backQuizButton1.setForeground(new java.awt.Color(255, 255, 255));
        backQuizButton1.setText("<");
        backQuizButton1.setBorder(null);
        backQuizButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backQuizButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 25, 330);
        topPanel.add(backQuizButton1, gridBagConstraints);

        topicLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        topicLabel.setForeground(new java.awt.Color(255, 255, 204));
        topicLabel.setText("Topic 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        topPanel.add(topicLabel, gridBagConstraints);

        timerLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        timerLabel.setForeground(new java.awt.Color(255, 255, 204));
        timerLabel.setText("Time 10s");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 35);
        topPanel.add(timerLabel, gridBagConstraints);

        scoreLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        scoreLabel.setForeground(new java.awt.Color(255, 255, 204));
        scoreLabel.setText("Score  20");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        topPanel.add(scoreLabel, gridBagConstraints);

        timerIcon.setBackground(new java.awt.Color(51, 0, 51));
        timerIcon.setForeground(new java.awt.Color(255, 255, 255));
        timerIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/timer.png"))); // NOI18N
        timerIcon.setMaximumSize(new java.awt.Dimension(50, 50));
        timerIcon.setPreferredSize(new java.awt.Dimension(50, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        topPanel.add(timerIcon, gridBagConstraints);

        scoreIcon.setBackground(new java.awt.Color(51, 0, 51));
        scoreIcon.setForeground(new java.awt.Color(255, 255, 255));
        scoreIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/star.png"))); // NOI18N
        scoreIcon.setPreferredSize(new java.awt.Dimension(50, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        topPanel.add(scoreIcon, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.1;
        add(topPanel, gridBagConstraints);

        questionNoLabel.setBackground(new java.awt.Color(255, 255, 204));
        questionNoLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 16)); // NOI18N
        questionNoLabel.setForeground(new java.awt.Color(51, 0, 51));
        questionNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        questionNoLabel.setText("Question 1/10");
        questionNoLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        questionNoLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 145, 0, 0);
        add(questionNoLabel, gridBagConstraints);

        questionTextArea.setEditable(false);
        questionTextArea.setBackground(new java.awt.Color(51, 0, 51));
        questionTextArea.setColumns(20);
        questionTextArea.setFont(new java.awt.Font("MS UI Gothic", 1, 16)); // NOI18N
        questionTextArea.setForeground(new java.awt.Color(255, 255, 255));
        questionTextArea.setLineWrap(true);
        questionTextArea.setRows(5);
        questionTextArea.setText("Deepfake technology is a type of __________ used to create fake but realistic images, videos, and audio recordings.");
        questionTextArea.setMinimumSize(new java.awt.Dimension(350, 100));
        questionTextArea.setPreferredSize(new java.awt.Dimension(350, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        add(questionTextArea, gridBagConstraints);

        nextQuestionBtn.setBackground(new java.awt.Color(255, 255, 204));
        nextQuestionBtn.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        nextQuestionBtn.setForeground(new java.awt.Color(51, 0, 51));
        nextQuestionBtn.setText("Next");
        nextQuestionBtn.setMinimumSize(new java.awt.Dimension(50, 20));
        nextQuestionBtn.setOpaque(true);
        nextQuestionBtn.setPreferredSize(new java.awt.Dimension(50, 20));
        nextQuestionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQuestionBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 174, 50, 0);
        add(nextQuestionBtn, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void trueOptnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trueOptnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trueOptnActionPerformed

    private void falseOptnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_falseOptnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_falseOptnActionPerformed

    private void backQuizButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backQuizButton1ActionPerformed
        stopTimer();
        // Switch to QuizPanel
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "quiz");
        resetQuiz();
        stopTimer();
    }//GEN-LAST:event_backQuizButton1ActionPerformed

    private void nextQuestionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQuestionBtnActionPerformed
        // Get user answer
        if (trueOptn.isSelected()) selected = "TRUE";
        else if (falseOptn.isSelected()) selected = "FALSE";
        
        System.out.println("Selected option:" + selected);
        // If not answer selected
        if (selected.equals("")) {
            JOptionPane.showMessageDialog(this, "Please select an option!");
            return;
        }
        
        // Get question
        Question currentQuestion = quiz2.getQuestion().get(currentIdx);

        // Check answer
        System.out.println("tfquiz, check answer...");
        if (quiz2.checkAnswer(currentQuestion, selected)) {
            System.out.println("Correct option chosen: " + selected);
            JOptionPane.showMessageDialog(this, "Correct! +10");

        } else {
            System.out.println("Wrong option chosen: " + selected);
            JOptionPane.showMessageDialog(this, "Wrong!");

        }
        
        selected = "";
        // Clear selection
        buttonGroup2.clearSelection();
        
        // Display next question
        currentIdx++;
        
        if (currentIdx < quiz2.getQuestion().size()) {
            displayQuestion();
        } else {
            // Quiz completed
            // TImer stop
            stopTimer();
            setTimeTaken(timer2.getSeconds());

            // Result display
            // Switch to ResultPanel
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "result");
            
            try {
                // Save result
                ResultLog.saveResult(2, quiz2.getScore(), timeTaken, quiz2.getCorrectCnt(), quiz2.getWrongCnt());
                resultPanel.displayResult(quiz2.getScore(), quiz2.getQuestion().size(), timeTaken, quiz2.getCorrectCnt(), quiz2.getWrongCnt(), quiz2.getTopic());
            } catch (ResultException e) {
                    JOptionPane.showMessageDialog(this, 
                        "An error occurred for saving result:\n" + e.getMessage(),
                        "Result Saving Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
            
        }

    }//GEN-LAST:event_nextQuestionBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backQuizButton1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton falseOptn;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JButton nextQuestionBtn;
    private javax.swing.JLabel questionNoLabel;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JLabel scoreIcon;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel timerIcon;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JRadioButton trueOptn;
    // End of variables declaration//GEN-END:variables
}
